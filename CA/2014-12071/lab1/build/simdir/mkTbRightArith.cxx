/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Tue Mar 27 13:56:46 KST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbRightArith.h"
#include "imported_BDPI_functions.h"


/* String declarations */
static std::string const __str_literal_1("PASSED", 6u);


/* Constructor */
MOD_mkTbRightArith::MOD_mkTbRightArith(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cycle(simHdl, "cycle", this, 32u, 0u, (tUInt8)0u),
    INST_randomShift_init(simHdl, "randomShift_init", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_randomVal_init(simHdl, "randomVal_init", this, 1u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 7u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbRightArith::init_symbols_0()
{
  init_symbol(&symbols[0u], "_read__h93", SYM_DEF, &DEF__read__h93, 32u);
  init_symbol(&symbols[1u], "cycle", SYM_MODULE, &INST_cycle);
  init_symbol(&symbols[2u], "RL_randomShift_initialize", SYM_RULE);
  init_symbol(&symbols[3u], "RL_randomVal_initialize", SYM_RULE);
  init_symbol(&symbols[4u], "RL_test", SYM_RULE);
  init_symbol(&symbols[5u], "randomShift_init", SYM_MODULE, &INST_randomShift_init);
  init_symbol(&symbols[6u], "randomVal_init", SYM_MODULE, &INST_randomVal_init);
}


/* Rule actions */

void MOD_mkTbRightArith::RL_randomVal_initialize()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    setSeed(3735928559llu);
  INST_randomVal_init.METH_write((tUInt8)1u);
}

void MOD_mkTbRightArith::RL_randomShift_initialize()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    setSeed(3405691582llu);
  INST_randomShift_init.METH_write((tUInt8)1u);
}

void MOD_mkTbRightArith::RL_test()
{
  tUInt32 DEF_x__h1066;
  tUInt8 DEF_NOT_cycle_EQ_128___d9;
  DEF__read__h93 = INST_cycle.METH_read();
  DEF_cycle_EQ_128___d6 = DEF__read__h93 == 128u;
  DEF_NOT_cycle_EQ_128___d9 = !DEF_cycle_EQ_128___d6;
  DEF_x__h1066 = DEF__read__h93 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_cycle_EQ_128___d6)
      dollar_display(sim_hdl, this, "s", &__str_literal_1);
    if (DEF_cycle_EQ_128___d6)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_NOT_cycle_EQ_128___d9)
      getRandom();
    if (DEF_NOT_cycle_EQ_128___d9)
      getRandom();
  }
  if (DEF_NOT_cycle_EQ_128___d9)
    INST_cycle.METH_write(DEF_x__h1066);
}


/* Methods */


/* Reset routines */

void MOD_mkTbRightArith::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_randomVal_init.reset_RST(ARG_rst_in);
  INST_randomShift_init.reset_RST(ARG_rst_in);
  INST_cycle.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbRightArith::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbRightArith::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cycle.dump_state(indent + 2u);
  INST_randomShift_init.dump_state(indent + 2u);
  INST_randomVal_init.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbRightArith::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 6u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h93", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "cycle_EQ_128___d6", 1u);
  num = INST_cycle.dump_VCD_defs(num);
  num = INST_randomShift_init.dump_VCD_defs(num);
  num = INST_randomVal_init.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbRightArith::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbRightArith &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbRightArith::vcd_defs(tVCDDumpType dt, MOD_mkTbRightArith &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF__read__h93) != DEF__read__h93)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h93, 32u);
	backing.DEF__read__h93 = DEF__read__h93;
      }
      ++num;
      if ((backing.DEF_cycle_EQ_128___d6) != DEF_cycle_EQ_128___d6)
      {
	vcd_write_val(sim_hdl, num, DEF_cycle_EQ_128___d6, 1u);
	backing.DEF_cycle_EQ_128___d6 = DEF_cycle_EQ_128___d6;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF__read__h93, 32u);
      backing.DEF__read__h93 = DEF__read__h93;
      vcd_write_val(sim_hdl, num++, DEF_cycle_EQ_128___d6, 1u);
      backing.DEF_cycle_EQ_128___d6 = DEF_cycle_EQ_128___d6;
    }
}

void MOD_mkTbRightArith::vcd_prims(tVCDDumpType dt, MOD_mkTbRightArith &backing)
{
  INST_cycle.dump_VCD(dt, backing.INST_cycle);
  INST_randomShift_init.dump_VCD(dt, backing.INST_randomShift_init);
  INST_randomVal_init.dump_VCD(dt, backing.INST_randomVal_init);
}
